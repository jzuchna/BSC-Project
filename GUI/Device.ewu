$version 6.60

$rect <50,270,250,310>
inline BSCHeader
{
  #include "BSCController.h"
  #include <stdlib.h>
  #include <stdio.h>
}

$rect <60,70,260,110>
$output false
class DeviceClass : Templates::DeviceClass
{
  $rect <930,80,1130,120>
  property int32 SampleVolume = 6;

  $rect <1130,80,1330,120>
  onset SampleVolume
  {
    // The property doesn't change -> nothing to do.
    if ( pure SampleVolume == value )
      return;

    // Remember the new value in the internal memory of the property.
    pure SampleVolume = value;
    trace "SampleVolume:"+string(SampleVolume);


    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    // Notify all associated property observers.
    notifyobservers ^SampleVolume;
  }

  $rect <480,240,680,280>
  property bool NewWell = false;

  $rect <680,240,880,280>
  onset NewWell
  {
    // The property doesn't change -> nothing to do.
    if ( pure NewWell == value )
      return;

    notifyobservers ^NewWell;

    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
     
    $endif

    trace "NewWell";

    // Notify all associated property observers.

  }

  // intervall in seconds; circuitNumber from 1 to 6
  $rect <480,140,680,180>
  method void StartSampling( arg int32 aIntervall, arg int32 aCircuitNumber )
  {
    trace "StartSampling - Intervall:"+string(aIntervall)+" CircuitNumber:"+string(aCircuitNumber);

    $if !$prototyper
     
    if(aCircuitNumber<0||aCircuitNumber>5){
      trace "ERROR: Wrong CircuitNumber"+string(aCircuitNumber);
      return;
    }if(aIntervall<=0){
      trace "ERROR: Wrong Intervall"+string(aIntervall);
      return;
    }

      native(aIntervall,aCircuitNumber){
        BSCAddOrder(aIntervall, aCircuitNumber);

      }
     
    $endif
  }

  $rect <240,180,440,220>
  object Core::SystemEvent SampleCollectedEvent;

  // This method is intended to be called by the device to notify the GUI application \
  // about a particular system event.
  $rect <40,180,240,220>
  $output true
  method void onSampleCollected( arg int32 aXPosition, arg int32 aYPosition, arg int32 aCircuitNumber, arg int32 aYear, arg int32 aMonth, arg int32 aDay, arg int32 aHour, arg int32 aMinute )
  {
    trace "SampleCollected - X:"+string(aXPosition)
    +"Y:"+string(aYPosition)
    +" CircuitNumber:"+string(aCircuitNumber)
    +" Time:"+string(aDay)+"."
    +string(aMonth)+"."
    +string(aYear)+" "
    +string(aHour)+":"
    +string(aMinute);


    var Device::SampleCollectedContext context = new Device::SampleCollectedContext;


    context.CircuitNumber = aCircuitNumber;
    context.Year=aYear;
    context.Month=aMonth;
    context.Day=aDay;
    context.Hour=aHour;
    context.Minute=aMinute;
    context.XPosition=aXPosition;
    context.YPosition=aYPosition;




    SampleCollectedEvent.Trigger( context, false );
  }

  $rect <240,230,440,270>
  object Core::SystemEvent RemainingTimeEvent;

  // This method is intended to be called by the device to notify the GUI application \
  // about a particular system event.
  $rect <40,230,240,270>
  $output true
  method void onRemainingTime( arg int32 aCircuitNumber, arg int32 aRemainingTime )
  {
    var Device::RemainingTimeContext context = new Device::RemainingTimeContext;
    if(aCircuitNumber>5||aCircuitNumber<0){
      trace "ERROR: Wrong Circuit Number:"+string(aCircuitNumber);
      return;
    }
    if(aRemainingTime<0){
      trace"ERROR: Wrong RemainingTime:"+string(aRemainingTime);

    }
    //trace "DEVICE: RemainingTime="+string(aRemainingTime);
    context.CircuitNumber=aCircuitNumber;
    context.RemainingTime=aRemainingTime;
    RemainingTimeEvent.Trigger( context, false );
  }

  $rect <480,190,680,230>
  method void StopSampling( arg int32 aCircuitNumber )
  {
    // The following code is used during prototyping only. It simply returns
    // a dummy value. No device specific API is used during prototyping.
    $if $prototyper
    $endif
    trace "StopSampling - CircuitNumber:"+string(aCircuitNumber);
    $if !$prototyper

    if(aCircuitNumber<0||aCircuitNumber>5){
      trace "ERROR: Wrong CircuitNumber:"+string(aCircuitNumber);
      return;
    }
     
    $endif
  }

  $rect <930,120,1130,160>
  method void SetBLPosition( arg int32 aX, arg int32 aY, arg int32 aZ )
  {
    // The following code is used during prototyping only. It simply returns
    // a dummy value. No device specific API is used during prototyping.
    $if $prototyper
    $endif

    trace "BLPostition: X:"+string(aX)+" Y:"+string(aY)+" Z:"+string(aZ);

    $if !$prototyper
     
    $endif
  }

  $rect <930,160,1130,200>
  method void SetTRPosition( arg int32 aX, arg int32 aY, arg int32 aZ )
  {
    // The following code is used during prototyping only. It simply returns
    // a dummy value. No device specific API is used during prototyping.
    $if $prototyper
     
    $endif

    trace "TRPostition: X:"+string(aX)+" Y:"+string(aY)+" Z:"+string(aZ);

    $if !$prototyper
     
    $endif
  }

  $rect <930,200,1130,240>
  method void SetWastePosition( arg int32 aX, arg int32 aY, arg int32 aZ )
  {
    // The following code is used during prototyping only. It simply returns
    // a dummy value. No device specific API is used during prototyping.
    $if $prototyper

    $endif

    trace "WastePostition: X:"+string(aX)+" Y:"+string(aY)+" Z:"+string(aZ);

    $if !$prototyper
     
    $endif
  }

  $rect <930,280,1130,320>
  method void SetCurrentPosition( arg int32 aX, arg int32 aY, arg int32 aZ )
  {
    // The following code is used during prototyping only. It simply returns
    // a dummy value. No device specific API is used during prototyping.
    $if $prototyper

    $endif

    trace "CurrentPostition: X:"+string(aX)+" Y:"+string(aY)+" Z:"+string(aZ);

    $if !$prototyper
     
    $endif
  }

  // Configuration
  note group Note
  {
    attr Bounds = <910,40,1340,340>;
  }

  // Extern Events
  note group Note1
  {
    attr Bounds = <20,40,450,350>;
  }

  $rect <930,240,1130,280>
  method void SetTopPosition( arg int32 aX, arg int32 aY, arg int32 aZ )
  {
    // The following code is used during prototyping only. It simply returns
    // a dummy value. No device specific API is used during prototyping.
    $if $prototyper

    $endif

    trace "TopPostition: X:"+string(aX)+" Y:"+string(aY)+" Z:"+string(aZ);

    $if !$prototyper
     
    $endif
  }

  $rect <240,130,440,170>
  property float Temperature = 0.0;

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of its setting or state value.
  $rect <40,130,240,170>
  $output true
  method void UpdateTemperature( arg float aNewArgument )
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewArgument != pure Temperature )
    {
      // Remember the new value in the internal memory of the property.
      pure Temperature = aNewArgument;
      //trace "Temperature: "+string(Temperature);

      // Notify all associated property observers.
      notifyobservers ^Temperature;
    }
  }

  // GUI intern
  note group Note2
  {
    attr Bounds = <20,500,310,630>;
  }

  $rect <40,540,240,580>
  method color getColor( arg int32 aCircuitNumber )
  {
    switch ( aCircuitNumber )
    {
      case 0  : return #F38900FF;    
      case 1  : return #32CE00FF;  
      case 2  : return #1E6033FF;  
      case 3  : return #0000FFFF;  
      case 4  : return #00FFFFFF; 
      case 5  : return #FF00FFFF;  
      default : return #FF0000FF; //rot=ERROR           
    }

      

      

  }

  $rect <240,280,440,320>
  object Core::SystemEvent TimeEvent;

  // This method is intended to be called by the device to notify the GUI application \
  // about a particular system event.
  $rect <40,280,240,320>
  $output true
  method void onTime( arg int32 aYear, arg int32 aMonth, arg int32 aDay, arg int32 aHour, arg int32 aMinute )
  {
    var Device::TimeContext context = new Device::TimeContext;
    context.Year=aYear;
    context.Month=aMonth;
    context.Day=aDay;
    context.Hour=aHour;
    context.Minute=aMinute;

    //trace "Time: "+string(context.Day)+"."+string(context.Month)+"."+string(context.Year)+" "
                          //+string(context.Hour)+":"+string(context.Minute);

    TimeEvent.Trigger( context, false );
  }

  $rect <480,80,680,120>
  method void ExitApplication()
  {
    trace "ExitApplication";
    $if $prototyper
    $endif

    $if !$prototyper
    native{

       BSCShutdown();

    }
    $endif

  }

  // Intern Events
  note group Note3
  {
    attr Bounds = <460,40,890,310>;
  }
}

$rect <60,110,260,150>
autoobject Device::DeviceClass Device;

$rect <400,70,600,110>
$output false
class SampleCollectedContext
{
  $rect <40,40,240,80>
  property int32 XPosition = 0;

  $rect <40,80,240,120>
  onset XPosition
  {
    // The value doesn't change - nothing to do.
    if ( pure XPosition == value )
      return;

    // Remember the property's new value.
    pure XPosition = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <40,120,240,160>
  onget XPosition
  {
    return pure XPosition;
  }

  $rect <260,40,460,80>
  property int32 CircuitNumber = 0;

  $rect <260,80,460,120>
  onset CircuitNumber
  {
    // The value doesn't change - nothing to do.
    if ( pure CircuitNumber == value )
      return;

    // Remember the property's new value.
    pure CircuitNumber = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <260,120,460,160>
  onget CircuitNumber
  {
    return pure CircuitNumber;
  }

  $rect <500,40,700,80>
  property int32 Year = 0;

  $rect <500,80,700,120>
  onset Year
  {
    // The value doesn't change - nothing to do.
    if ( pure Year == value )
      return;

    // Remember the property's new value.
    pure Year = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <500,120,700,160>
  onget Year
  {
    return pure Year;
  }

  $rect <730,40,930,80>
  property int32 Month = 0;

  $rect <730,80,930,120>
  onset Month
  {
    // The value doesn't change - nothing to do.
    if ( pure Month == value )
      return;

    // Remember the property's new value.
    pure Month = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <730,120,930,160>
  onget Month
  {
    return pure Month;
  }

  $rect <950,40,1150,80>
  property int32 Day = 0;

  $rect <950,80,1150,120>
  onset Day
  {
    // The value doesn't change - nothing to do.
    if ( pure Day == value )
      return;

    // Remember the property's new value.
    pure Day = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <950,120,1150,160>
  onget Day
  {
    return pure Day;
  }

  $rect <730,180,930,220>
  property int32 Minute = 0;

  $rect <730,220,930,260>
  onset Minute
  {
    // The value doesn't change - nothing to do.
    if ( pure Minute == value )
      return;

    // Remember the property's new value.
    pure Minute = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <730,260,930,300>
  onget Minute
  {
    return pure Minute;
  }

  $rect <500,180,700,220>
  property int32 Hour = 0;

  $rect <500,220,700,260>
  onset Hour
  {
    // The value doesn't change - nothing to do.
    if ( pure Hour == value )
      return;

    // Remember the property's new value.
    pure Hour = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <500,260,700,300>
  onget Hour
  {
    return pure Hour;
  }

  $rect <40,170,240,210>
  property int32 YPosition = 0;

  $rect <40,210,240,250>
  onset YPosition
  {
    // The value doesn't change - nothing to do.
    if ( pure YPosition == value )
      return;

    // Remember the property's new value.
    pure YPosition = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <40,250,240,290>
  onget YPosition
  {
    return pure YPosition;
  }
}

$rect <400,110,600,150>
$output false
class RemainingTimeContext
{
  $rect <10,10,210,50>
  property int32 RemainingTime = 0;

  $rect <10,50,210,90>
  onset RemainingTime
  {
    // The value doesn't change - nothing to do.
    if ( pure RemainingTime == value )
      return;

    // Remember the property's new value.
    pure RemainingTime = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <10,90,210,130>
  onget RemainingTime
  {
    return pure RemainingTime;
  }

  $rect <220,10,420,50>
  property int32 CircuitNumber = 0;

  $rect <220,50,420,90>
  onset CircuitNumber
  {
    // The value doesn't change - nothing to do.
    if ( pure CircuitNumber == value )
      return;

    // Remember the property's new value.
    pure CircuitNumber = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <220,90,420,130>
  onget CircuitNumber
  {
    return pure CircuitNumber;
  }
}

// System Event Context
note group Note
{
  attr Bounds = <340,20,640,220>;
}

// Device Interface
note group Note1
{
  attr Bounds = <10,20,310,220>;
}

$rect <400,150,600,190>
$output false
class TimeContext
{
  $rect <10,0,210,40>
  property int32 Day = 0;

  $rect <10,40,210,80>
  onset Day
  {
    // The value doesn't change - nothing to do.
    if ( pure Day == value )
      return;

    // Remember the property's new value.
    pure Day = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <10,80,210,120>
  onget Day
  {
    return pure Day;
  }

  $rect <220,0,420,40>
  property int32 Month = 0;

  $rect <220,40,420,80>
  onset Month
  {
    // The value doesn't change - nothing to do.
    if ( pure Month == value )
      return;

    // Remember the property's new value.
    pure Month = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <220,80,420,120>
  onget Month
  {
    return pure Month;
  }

  $rect <440,0,640,40>
  property int32 Year = 0;

  $rect <440,40,640,80>
  onset Year
  {
    // The value doesn't change - nothing to do.
    if ( pure Year == value )
      return;

    // Remember the property's new value.
    pure Year = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <440,80,640,120>
  onget Year
  {
    return pure Year;
  }

  $rect <0,140,200,180>
  property int32 Hour = 0;

  $rect <0,180,200,220>
  onset Hour
  {
    // The value doesn't change - nothing to do.
    if ( pure Hour == value )
      return;

    // Remember the property's new value.
    pure Hour = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <0,220,200,260>
  onget Hour
  {
    return pure Hour;
  }

  $rect <220,140,420,180>
  property int32 Minute = 0;

  $rect <220,180,420,220>
  onset Minute
  {
    // The value doesn't change - nothing to do.
    if ( pure Minute == value )
      return;

    // Remember the property's new value.
    pure Minute = value;

    // TO DO:
    // 
    // Now you can handle the alternation of the property.
  }

  $rect <220,220,420,260>
  onget Minute
  {
    return pure Minute;
  }
}

// Header
note group Note2
{
  attr Bounds = <10,230,310,340>;
}
