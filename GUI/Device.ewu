$version 6.60

$rect <40,120,240,160>
inline Inline
{
  #include <unistd.h>				//Needed for I2C port
  #include <fcntl.h>				//Needed for I2C port
  #include <sys/ioctl.h>			//Needed for I2C port
  #include <linux/i2c-dev.h>		//Needed for I2C port
  #include <stdio.h>
  #include <time.h>
}

$rect <0,20,200,60>
$output false
class DeviceClass : Templates::DeviceClass
{
  // String:"Column"+"Row"
  $rect <200,10,400,50>
  property string WellIndex = "";

  $rect <400,10,600,50>
  onset WellIndex
  {
    // The property doesn't change -> nothing to do.
    if ( pure WellIndex == value )
      return;

    // Remember the new value in the internal memory of the property.
    pure WellIndex = value;

    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    // Notify all associated property observers.
    notifyobservers ^WellIndex;
  }

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of its setting or state value.
  $rect <0,10,200,50>
  $output true
  method void UpdateWellIndex( arg string aNewValue )
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewValue != pure WellIndex )
    {
      // Remember the new value in the internal memory of the property.
      pure WellIndex = aNewValue;

      // Notify all associated property observers.
      notifyobservers ^WellIndex;
    }
  }

  $rect <200,100,400,140>
  property int32 Temp = 0;

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of its setting or state value.
  $rect <0,100,200,140>
  $output true
  method void UpdateTemp( arg int32 aNewValue )
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewValue != pure Temp )
    {
      // Remember the new value in the internal memory of the property.
      pure Temp = aNewValue;

      // Notify all associated property observers.
      notifyobservers ^Temp;
    }
  }

  $rect <400,100,600,140>
  slot getTemp
  {
    var int32 aNum  =0 ;

    native (aNum) {

    	int file_i2c;
    	int length;
    	unsigned char buffer[60] = {0};
            int i;
            
    	//----- OPEN THE I2C BUS -----
    	char* filename = (char*)"/dev/i2c-1";
    	if ((file_i2c = open(filename, O_RDWR)) < 0)
    	{
    		//ERROR HANDLING: you can check errno to see what went wrong
    		printf("Failed to open the i2c bus");
    		return;
    	}
    	
    	int addr = (0x4f);          //<<<<<The I2C address of the slave
    	if (ioctl(file_i2c, I2C_SLAVE, addr) < 0)
    	{
    		printf("Failed to acquire bus access and/or talk to slave.\n");
    		//ERROR HANDLING; you can check errno to see what went wrong
    		return;
    	}
    	
                //----- READ BYTES -----
                length = 1;			//<<< Number of bytes to read
                if (read(file_i2c, buffer, length) != length)		//read() returns the number of bytes actually read, if it doesn't match then an error occurred (e.g. no response from the device)
                {                                                                                                    
                        //ERROR HANDLING: i2c transaction failed
                        //printf("Failed to read from the i2c bus.\n");
                }
                else
                {
                         aNum = buffer[0];
                }
    }

    UpdateTemp( aNum);
  }

  $rect <200,180,400,220>
  property int32 NuOfCircuits = 6;

  $rect <400,180,600,220>
  onset NuOfCircuits
  {
    // The property doesn't change -> nothing to do.
    if ( pure NuOfCircuits == value )
      return;

    // Remember the new value in the internal memory of the property.
    pure NuOfCircuits = value;
    trace value;


    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    // Notify all associated property observers.
    notifyobservers ^NuOfCircuits;
  }

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of its setting or state value.
  $rect <0,180,200,220>
  $output true
  method void UpdateNuOfCircuits( arg int32 aNewValue )
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewValue != pure NuOfCircuits )
    {
      // Remember the new value in the internal memory of the property.
      pure NuOfCircuits = aNewValue;

      // Notify all associated property observers.
      notifyobservers ^NuOfCircuits;
    }
  }

  $rect <200,265,400,305>
  property point HomePosition = <0,0>;

  $rect <400,265,600,305>
  onset HomePosition
  {
    // The property doesn't change -> nothing to do.
    if ( pure HomePosition == value )
      return;

    // Remember the new value in the internal memory of the property.
    pure HomePosition = value;
    trace value;

    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    // Notify all associated property observers.
    notifyobservers ^HomePosition;
  }

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of its setting or state value.
  $rect <0,265,200,305>
  $output true
  method void UpdateHomePosition( arg point aNewValue )
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewValue != pure HomePosition )
    {
      // Remember the new value in the internal memory of the property.
      pure HomePosition = aNewValue;

      // Notify all associated property observers.
      notifyobservers ^HomePosition;
    }
  }

  $rect <200,330,400,370>
  property point TrashPosition = <0,0>;

  $rect <400,330,600,370>
  onset TrashPosition
  {
    // The property doesn't change -> nothing to do.
    if ( pure TrashPosition == value )
      return;

    // Remember the new value in the internal memory of the property.
    pure TrashPosition = value;
    trace value;

    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    // Notify all associated property observers.
    notifyobservers ^TrashPosition;
  }

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of its setting or state value.
  $rect <0,330,200,370>
  $output true
  method void UpdateTrashPosition( arg point aNewValue )
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewValue != pure TrashPosition )
    {
      // Remember the new value in the internal memory of the property.
      pure TrashPosition = aNewValue;

      // Notify all associated property observers.
      notifyobservers ^TrashPosition;
    }
  }

  $rect <200,400,400,440>
  property point CurrentPosition = <0,0>;

  $rect <400,400,600,440>
  onset CurrentPosition
  {
    // The property doesn't change -> nothing to do.
    if ( pure CurrentPosition == value )
      return;

    // Remember the new value in the internal memory of the property.
    pure CurrentPosition = value;
    trace value;

    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    // Notify all associated property observers.
    notifyobservers ^CurrentPosition;
  }

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of its setting or state value.
  $rect <0,400,200,440>
  $output true
  method void UpdateCurrentPosition( arg int32 aNewValue )
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewValue != pure CurrentPosition )
    {
      // Remember the new value in the internal memory of the property.
      pure CurrentPosition = aNewValue;

      // Notify all associated property observers.
      notifyobservers ^CurrentPosition;
    }
  }

  $rect <200,470,400,510>
  property bool NewWell = false;

  $rect <400,470,600,510>
  onset NewWell
  {
    // The property doesn't change -> nothing to do.
    if ( pure NewWell == value )
      return;

    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    // Notify all associated property observers.
    notifyobservers ^NewWell;
  }

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of its setting or state value.
  $rect <0,470,200,510>
  $output true
  method void UpdateNewWell( arg int32 aNewValue )
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewValue != pure NewWell )
    {
     
      notifyobservers ^NewWell;
    }
  }
}

$rect <200,20,400,60>
autoobject Device::DeviceClass Device;
