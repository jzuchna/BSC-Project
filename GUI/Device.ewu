$version 6.60

$rect <0,20,200,60>
$output false
class DeviceClass : Templates::DeviceClass
{
  // Stores a string of the index of a well part to write the time to
  $rect <200,10,400,50>
  property string WellIndex = "";

  $rect <400,10,600,50>
  onset WellIndex
  {
    // The property doesn't change -> nothing to do.
    if ( pure WellIndex == value )
      return;

    // Remember the new value in the internal memory of the property.
    pure WellIndex = value;

    // For target code generation you will use your specific device API 
    // to change the affected value.
    $if !$prototyper
      native ( value )
      {
        /*
           TO DO:

           You can call a function of your own device API or you simply
           modify a variable existing in your middleware to reflect the
           new value:

           YourDevice_SetSomeValue( value );

           or

           YourDevice_SomeVariable = value;
        */
      }
    $endif

    // Notify all associated property observers.
    notifyobservers ^WellIndex;
  }

  // This method is intended to be called by the device to notify the GUI application \
  // about an alternation of its setting or state value.
  $rect <0,10,200,50>
  $output true
  method void UpdateProperty( arg string aNewValue )
  {
    // Only if the reported value does differ from the one stored currently in the property.
    if ( aNewValue != pure WellIndex )
    {
      // Remember the new value in the internal memory of the property.
      pure WellIndex = aNewValue;

      // Notify all associated property observers.
      notifyobservers ^WellIndex;
    }
  }
}

$rect <200,20,400,60>
autoobject Device::DeviceClass Device;
